blueprint:
  name: Reminders with actionable Alexa and push notifications
  description: "`- Version: 1.0 -`\n\n
    Mi è venuto in mente di avviare questo progetto poiché sto constatando un certo declino nella mia memoria con l'avanzare dell'età. Per rendere più chiaro il concetto, ho preso in considerazione il caso di mio figlio, che durante i periodi influenzali o in particolari stagioni necessita di assumere diversi farmaci. Fino ad ora, avevo impostato degli allarmi sul calendario, ma questo non era sufficiente a ricordarmi tutto. Così, ho pensato di sfruttare Home Assistant e Alexa per darmi una mano.

    Questo progetto è estremamente intuitivo da utilizzare: è sufficiente impostare un orario, una data di inizio e fine, selezionare uno o più dispositivi mobili e scrivere il testo delle notifiche. È importante notare che, per ricevere le notifiche push (anche se non obbligatorie), è necessario avere installata l'app companion. Inoltre, per interagire con Alexa, occorre utilizzare il lavoro di [Keaton Taylor](https://github.com/keatontaylor/alexa-actions).

    A quel punto, all'orario stabilito, riceverai una richiesta da Alexa e una notifica push. Se rispondi in maniera positiva a Alexa o interagisci con la notifica push, non riceverai ulteriori promemoria. In caso contrario, trascorso il tempo impostato, riceverai una nuova richiesta da Alexa e una nuova notifica."
  domain: automation
  author: Marco Picardo
  homeassistant:
    min_version: 2024.4.0
  input:
    orario_start:
      default: "13:00"
      name: Orario notifica
      description: "Impostare orario promemoria.


        Set reminder time."
      selector:
        text:
          type: time

    text_notify:
      name: Text notify
      default: Hai un promemoria. Ok?
      description: "Impostare orario promemoria.


        Enter the text of the memo."

    date_start:
      name: Data Inizio
      description:
        "Inserire la data inizio promemoria, se non selezionato sarà valida da oggi.


        Enter the reminder start date, if not selected it will be valid from today."
      default: "2000-01-01"
      selector:
        date:

    date_stop:
      name: Data fine
      description:
        "Inserire la data fine promemoria, se non selezionato non avrà una scadenza.


        Enter the memo end date, if not selected it will not have an expiration date."
      default: "3000-01-01"
      selector:
        date:

    delay_notify:
      name: Tempo ripeti
      description: "REQUISITO: Impostare il tempo per ripetere il messaggio.


        REQUIRED: Set the time to repeat the message."
      selector:
        duration:

    alexa_device: 
      name: Dispositivo alexa
      description: >-
        Scegli il dispositivo Alexa su cui desideri ricevere l'annuncio. Se non lo selezioni, l'annuncio verrà riprodotto su un dispositivo casuale.


        Choose the Alexa device where you want to receive the announcement. If not selected, the announcement will be played on a random device.
      default: "media_player.alexa_random"
      selector:
        entity:
          filter:
            integration: alexa_media
            domain: media_player


    notify_device:
      name: Dispositi mobile per notifiche
      default: "notify.mobile_disable"
      description:
        "Il dispositivo deve eseguire app ufficiale Home Assistant per ricevere le notifiche.


        Device must run official Home Assistant app to receive notifications."
      selector:
        device:
          multiple: true
          integration: mobile_app

  source_url: https://github.com/Home-Assistant-Pro-Team/Blueprint-Reminders-with-actionable-Alexa-and-push-notifications/blob/main/reminders_with_actionable.yaml
mode: restart
trigger_variables:
  my_event: !input text_notify
variables:
  alexa_device: !input alexa_device
  text_notify: !input text_notify
  date_start: !input date_start
  date_stop: !input date_stop
trigger:
  - platform: time
    at: !input orario_start
  - platform: event
    event_type: mobile_app_notification_action
    event_data:
      action: "{{ my_event[:50] | slugify }}"
action:
  - alias: >-
      IF: La data fine è successiva a quella attuale. 
      THEN: Ivia notifica per ricordare di cancellare automazione. 
      ELSE: Gestisci avvisi di promemoria avvisi di promemoria
    if:
      - "{{now().strftime('%Y-%m-%d') > date_stop }}"
    then:
      - alias: "Ripeti per ogni disposito mobile"
        repeat:
          for_each: !input notify_device
          sequence:
            - alias: "Invia notifica al dispositivo mobile per cancellare automazione con action che riporta alla pagina dell'automazione"
              service: "notify.mobile_app_{{ device_attr(repeat.item, 'name') | slugify }}"
              data:
                message: "{{ 'ELIMINARE PROMEMORIA: ' ~ text_notify }}"
                data:
                  notification_icon: "mdi:delete"
                  sticky: "true"
                  actions:
                    - action: "URI"
                      title: "Elimina"
                      uri: "/config/automation/edit/{{ this.attributes.id }}"
    else:
      - alias: >-
          IF: Attivazione è orario promemoria. 
          THEN: Invia avvisi 
          ELSE: Cancella notifiche ed interrompi avvisi.
        if:
          - "{{ trigger.platform == 'time' }}"
          - "{{ date_start <= now().strftime('%Y-%m-%d') <= date_stop }}"
        then:
          - alias: Ripeti avvisi per un massimo di 20 volte
            repeat:
              count: 20
              sequence:
                - alias: "Ripeti per ogni disposito mobile"
                  repeat:
                    for_each: !input notify_device
                    sequence:
                      - alias: "Invia notifica al dispositivo mobile"
                        service: "notify.mobile_app_{{ device_attr(repeat.item, 'name') | slugify }}"
                        data:
                          message: !input text_notify
                          data:
                            notification_icon: "mdi:calendar-alert-outline"
                            tag: "{{ text_notify[:50] | slugify }}"
                            sticky: "true"
                            actions:
                              - action: "{{ text_notify[:50] | slugify }}"
                                title: "OK"
                - alias: Esegui lo script delle notifiche con action alexa
                  service: script.activate_alexa_actionable_notification
                  data:
                    text: !input text_notify
                    event_id: "{{ text_notify[:50] | slugify }}"
                    alexa_device: >- 
                      {% if alexa_device == 'media_player.alexa_random' %}
                        {{ states.media_player | selectattr('attributes.source','eq','Local Speaker') | map(attribute='entity_id') | select('in', integration_entities('alexa_media')) | list | random }}
                      {% else %}
                        {{ alexa_device }}
                      {% endif %}
                - alias: Attendi risposta ad Alexa
                  wait_for_trigger:
                    - alias: Risposta ad Alexa
                      platform: event
                      event_type: alexa_actionable_notification
                      event_data:
                        event_id: "{{ text_notify[:50] | slugify }}"
                - alias: >-
                    IF: risposta da alexa negativa 
                    THEN: Fai attendi per ripetere avviso 
                    ELSE: cancella notifiche e blocca automazione.
                  if:
                    - alias: Risposta positiva da alexa
                      condition: template
                      value_template: "{{ 'ResponseYes' != wait.trigger.event.data.event_response }}"
                  then:
                    - alias: Attendi per ripetere notifica push e messaggio alexa
                      delay: !input delay_notify
                  else:
                    - repeat:
                        for_each: !input notify_device
                        sequence:
                          - service: "notify.mobile_app_{{ device_attr(repeat.item, 'name') | slugify }}"
                            data:
                              message: "clear_notification"
                              data:
                                tag: "{{ text_notify[:50] | slugify }}"
                    - stop: Stop promemoria per risposta positiva Alexa
        else:
          - alias: "Ripeti per ogni disposito mobile"
            repeat:
              for_each: !input notify_device
              sequence:
                - alias: "Invia notifica al dispositivo mobile"
                  service: "notify.mobile_app_{{ device_attr(repeat.item, 'name') | slugify }}"
                  data:
                    message: "clear_notification"
                    data:
                      tag: "{{ text_notify[:50] | slugify }}"
